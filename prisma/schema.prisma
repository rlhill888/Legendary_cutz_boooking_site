// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
model Barber {
  id        Int       @id @default(autoincrement())
  createdAt DateTime @default(now())
  gmail String @unique
  name String
  offDays String 
  password String
  phoneNumber Int
  recieveNewAppointmentReminders Boolean  @default(false)
  recieveCanceledAppointmentReminders Boolean  @default(false)
  keepTrackOfAppointmentsBeingPaid Boolean  @default(false)
  fiveYearScheduleCreated Boolean @default(false)
  Admin Boolean @default(false)
  barberActive Boolean @default(false)
  yearCalendars YearCalendar[]
  services Service[]
  appointments Appointment[]
  monthCalendars MonthCalendar[]
  dayCalendars DayCalendar[]
}

model Service {
 id        Int       @id @default(autoincrement())
 barberId Int
 time Int
 price Float
 name String 
 barber Barber? @relation(fields: [barberId], references: [id])

}

model Appointment{
   id        Int       @id @default(autoincrement())
   stripeSessionsId String @unique
   appointmentMadeAt  DateTime @default(now())
   appointmentStartTime String
   appointmentPaid Boolean  @default(false)
   appointmentEndTime String
   totalPriceAfterDownPayment Float
   downPaymentPaid Boolean  @default(false)
   dateOfAppointment String
   cancelledAppointment Boolean  @default(false)
   appintmnetCustomerNames String
   appointmentDone Boolean  @default(false)
   appointmentScheduled Boolean @default(false)
   phomeNumber String
   barberId Int
   recieptDetails String
   dayId Int
   monthId Int
   yearId Int

   barber Barber? @relation(fields: [barberId], references: [id])
   dayCalendar DayCalendar ?  @relation(fields: [dayId], references: [id])
   monthCalendar MonthCalendar ?  @relation(fields: [monthId], references: [id])
   yearCalendar YearCalendar ?  @relation(fields: [yearId], references: [id])
}


model YearCalendar{
  id        Int       @id @default(autoincrement())
  calendarObj String
  barberId Int
  year Int
  barber Barber? @relation(fields: [barberId], references: [id])
  appointments Appointment[]
  months MonthCalendar[]
  days DayCalendar[]
}

model MonthCalendar{
  id        Int       @id @default(autoincrement())
  month String
  monthNumber Int
  monthDate String
  barberId Int
  yearId Int
  days DayCalendar[]
  appointments Appointment[]
  barber Barber? @relation(fields: [barberId], references: [id])
  year YearCalendar? @relation(fields: [yearId], references: [id])
}

model DayCalendar{
  id        Int       @id @default(autoincrement())
  day Int
  availibility String
  weekDayInt Int
  weekDayString String
  timeSlotsTaken String
  dayBlockedOff Boolean
  timeUnavailable String
  date String
  barberId Int
  monthId Int
  yearId Int
  appointments Appointment[]
  year YearCalendar ?  @relation(fields: [yearId], references: [id])
  month MonthCalendar ?  @relation(fields: [monthId], references: [id])
  barber Barber? @relation(fields: [barberId], references: [id])

}